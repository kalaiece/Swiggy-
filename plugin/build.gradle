plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.7.0'

    // Use Gradle TestKit for testing Gradle plugins
    testImplementation gradleTestKit()

    // Functional test dependencies
    functionalTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    functionalTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'org.example.greeting'
            implementationClass = 'org.example.MagicalArenaPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
